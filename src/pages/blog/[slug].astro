---
import Layout from '../../layouts/Layout.astro';
import { Navigation } from '../../components/Navigation';
import { Footer } from '../../components/Footer';
import { useTranslations, defaultLang, getLangFromUrl, type Language } from '../../lib/i18n';
import { Calendar, ArrowLeft, Tag } from 'lucide-react';
import '../../styles/globals.css';
import { loadBlogPosts } from '@/lib/utils';



export function getStaticPaths() {
  const blogPosts = loadBlogPosts();

  return blogPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const blogPosts = loadBlogPosts();

const { post } = Astro.props;
const currentLang = getLangFromUrl(Astro.url);
const t = useTranslations(currentLang);

const formatDate = (dateString: string, lang: Language) => {
  const date = new Date(dateString);
  return date.toLocaleDateString(lang === 'ca' ? 'ca-ES' : lang === 'es' ? 'es-ES' : 'en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

const getBackUrl = () => {
  return currentLang === 'es' ? '/#blog' : `/${currentLang}/#blog`;
};

// Convert markdown-style content to HTML
const formatContent = (content: string) => {
  return content
    .replace(/^# (.+)$/gm, '<h1>$1</h1>')
    .replace(/^## (.+)$/gm, '<h2>$1</h2>')
    .replace(/^### (.+)$/gm, '<h3>$1</h3>')
    .replace(/^\- (.+)$/gm, '<li>$1</li>')
    .replace(/(<li>.*<\/li>)/gs, '<ul>$1</ul>')
    .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.+?)\*/g, '<em>$1</em>')
    .replace(/`(.+?)`/g, '<code>$1</code>')
    .replace(/\n\n/g, '</p><p>')
    .replace(/^(?!<[h|u|l])/gm, '<p>')
    .replace(/(?<!>)$/gm, '</p>')
    .replace(/<p><\/p>/g, '')
    .replace(/<p>(<[h|u])/g, '$1')
    .replace(/(<\/[h|u]>)<\/p>/g, '$1');
};

// import.meta.glob() creates a mapping at build time between the original paths and the final processed URLs
// On local it is the same, but when building images are optimized and hashed
// e.g.: /src/assets/images/cat1.jpg -> /_astro_image_123abc.jpg
const images = import.meta.glob('/src/assets/images/*', { eager: true, as: 'url' });

const resolveImagePath = (imageName) => {
  const imageKey = imageName.startsWith('/') ? imageName : `/${imageName}`;
  return images[imageKey] || '';
};
---

<Layout title={`${post.title} - AsociaciÃ³n Gats Patraix`}>
  <Navigation t={t} lang={currentLang} currentPath={Astro.url.pathname} isBlogPage={true} client:load />
  
  <main class="pt-20">
    <!-- Hero Section -->
    <section class="relative py-20 bg-gray-900 text-white overflow-hidden">
      <div 
        class="absolute inset-0 bg-cover bg-center bg-no-repeat opacity-30"
        style={`background-image: url(${resolveImagePath(post.image)})`}
      ></div>
      
      <div class="relative z-10 max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <a 
          href={getBackUrl()}
          class="inline-flex items-center text-white hover:text-orange-400 transition-colors mb-6"
        >
          <ArrowLeft class="w-4 h-4 mr-2" />
          {t.blog.title}
        </a>
        
        <div class="flex items-center text-sm text-gray-300 mb-4">
          <Calendar class="w-4 h-4 mr-2" />
          {t.blog.publishedOn} {formatDate(post.publishedAt, currentLang)} by {post.author}
        </div>
        
        <h1 class="text-4xl md:text-6xl font-bold mb-6 leading-tight">
          {post.title}
        </h1>
        
        <p class="text-xl text-gray-200 mb-6">
          {post.excerpt}
        </p>
        
        <div class="flex flex-wrap gap-2">
          {post.tags.map((tag: string) => (
            <span key={tag} class="inline-flex items-center px-3 py-1 rounded-full text-sm bg-white/20 text-white">
              <Tag class="w-3 h-3 mr-1" />
              {tag}
            </span>
          ))}
        </div>
      </div>
    </section>

    <!-- Article Content -->
    <section class="py-16">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <article class="prose prose-lg max-w-none">
          <div set:html={formatContent(post.content)} />
        </article>
        
        <!-- Author Info -->
        <div class="mt-12 p-6 bg-gray-50 rounded-xl">
          <div class="flex items-center">
            <div class="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mr-4">
              <span class="text-orange-600 font-bold text-xl">
                {post.author.split(' ').map(n => n[0]).join('')}
              </span>
            </div>
            <div>
              <h3 class="font-semibold text-gray-900">{post.author}</h3>
              <p class="text-gray-600">Volunteer Writer</p>
            </div>
          </div>
        </div>
        
        <!-- Related Posts -->
        <div class="mt-16">
          <h2 class="text-2xl font-bold text-gray-900 mb-8">Related Articles</h2>
          <div class="grid md:grid-cols-2 gap-8">
            {blogPosts.filter(p => p.slug !== post.slug).slice(0, 2).map((relatedPost) => (
              <a 
                key={relatedPost.slug}
                href={`/blog/${relatedPost.slug}`}
                class="group block"
              >
                <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow">
                  <img
                    src={relatedPost.image}
                    alt={relatedPost.title}
                    class="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                  />
                  <div class="p-6">
                    <div class="flex items-center text-sm text-gray-500 mb-2">
                      <Calendar class="w-4 h-4 mr-2" />
                      {formatDate(relatedPost.publishedAt, currentLang)}
                    </div>
                    <h3 class="font-bold text-gray-900 group-hover:text-orange-600 transition-colors">
                      {relatedPost.title}
                    </h3>
                    <p class="text-gray-600 mt-2 line-clamp-2">
                      {relatedPost.excerpt}
                    </p>
                  </div>
                </div>
              </a>
            ))}
          </div>
        </div>
      </div>
    </section>
  </main>
  
  <Footer t={t} client:load />
</Layout>

<style>
  .prose {
    @apply text-gray-700;
  }
  
  .prose h1 {
    @apply text-3xl font-bold text-gray-900 mb-6;
  }
  
  .prose h2 {
    @apply text-2xl font-bold text-gray-900 mb-4 mt-8;
  }
  
  .prose h3 {
    @apply text-xl font-bold text-gray-900 mb-3 mt-6;
  }
  
  .prose p {
    @apply mb-4 leading-relaxed;
  }
  
  .prose ul {
    @apply mb-4 list-disc list-inside space-y-2;
  }
  
  .prose li {
    @apply leading-relaxed;
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>